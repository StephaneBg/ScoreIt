/*
 * Copyright (c) 2016 SBG Apps
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'

dependencies {
    compile 'com.android.support:support-v4:23.2.0'
    compile 'com.android.support:appcompat-v7:23.2.0'
    compile 'com.android.support:recyclerview-v7:23.2.0'
    compile 'com.android.support:design:23.2.0'
    compile 'com.android.support:percent:23.2.0'

    compile 'com.google.code.gson:gson:2.4'
    compile 'com.anjlab.android.iab.v3:library:1.0.31'
    compile 'com.code-troopers.betterpickers:library:2.5.1'
    compile 'com.sromku:simple-storage:1.2.0'
    compile 'com.github.jkwiecien:CountingTextView:1.0.10'
}

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId 'com.sbgapps.scoreit'
        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        versionName project.VERSION_NAME
        versionCode Integer.parseInt(project.VERSION_CODE)
        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        def signingFile = file("signing.properties")
        def signingProperties = new Properties()

        release {
            if (signingFile.exists()) {
                signingProperties.load(signingFile.newInputStream())

                storeFile file(signingProperties["store.file"])
                storePassword signingProperties["store.password"]
                keyAlias signingProperties["key.alias"]
                keyPassword signingProperties["key.password"]
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            jniDebuggable false
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
    }
}

// Get location of adb
Properties localProperties = new Properties()
try {
    localProperties.load(project.rootProject.file('local.properties').newDataInputStream())
}
catch (ex) {
    throw new InvalidUserDataException("You should define the path to your Android SDK as a " +
            "property `sdk.dir` in local.properties on the project root."
    )
}
def adb = localProperties.getProperty('sdk.dir') + '/platform-tools/adb'

task runDebug(dependsOn: 'installDebug') {
    description 'Runs the debug-flavour of the app on the connected device'
    doLast {
        exec {
            commandLine "$adb", "shell", "am", "start", "-n", "com.sbgapps.scoreit/.ScoreItActivity"
        }
    }
}

task runRelease(dependsOn: 'installRelease') {
    description 'Runs the release-flavour of the app on the connected device'
    doLast {
        exec {
            commandLine "$adb", "shell", "am", "start", "-n", "com.sbgapps.scoreit/.ScoreItActivity"
        }
    }
}
